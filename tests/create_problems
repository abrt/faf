#!/usr/bin/python
# -*- encoding: utf-8 -*-
try:
    import unittest2 as unittest
except ImportError:
    import unittest

import logging
import datetime
import random
from collections import namedtuple

import faftests
from pyfaf.storage import Problem
from pyfaf.actions.create_problems import CreateProblems
from pyfaf.queries import get_reports_for_problems


class CreateProblemsTestCase(faftests.DatabaseCase):

    """
    Test case for pyfaf.actions.create_problems
    """

    def setUp(self):
        super(CreateProblemsTestCase, self).setUp()
        self.basic_fixtures()

    def test_create_problems_problemtypes(self):
        """
        Test create problems functionality for each of supported problemtype
        """

        problemtypes = ["core", "python", "java", "kerneloops"]
        for problemtype in problemtypes:
            self.save_report("ureport_{0}".format(problemtype))

        self.call_action("create-problems")

        self.assertEqual(len(self.db.session.query(Problem).all()),
                         len(problemtypes))

    def test_create_problems_removes_empty_problems(self):
        """
        Test create problems removes problems without reports
        """

        p = Problem(first_occurrence=datetime.date.today(),
                    last_occurrence=datetime.date.today())

        self.db.session.add(p)
        self.db.session.flush()

        self.call_action("create-problems")

        self.assertEqual(self.db.session.query(Problem).count(), 0)

    def test_create_problems_removes_invalid_reports_from_problems(self):
        """
        Test create problems removes reports with invalid stacktrace
        """

        self.save_report("ureport_core")
        self.save_report("ureport_core_invalid")

        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 1)

    def randomize_ureport(self, ureport, rnd, mode, amount=1):
        result = ureport.copy()
        frames = result["problem"]["stacktrace"][0]["frames"]
        # Drop random frame
        if mode == 0:
            for i in range(amount):
                if len(frames) > 2:
                    frames.pop(rnd.randint(0, len(frames)-1))
        # Insert random frame
        if mode == 1:
            for i in range(amount):
                f = {
                    "address": rnd.randint(1000, 1000000),
                    "build_id": str(rnd.randint(10000000000, 99999999999)),
                    "build_id_offset": rnd.randint(1000, 1000000),
                    "function_name": "func_"+str(rnd.randint(10000000000, 99999999999)),
                    "file_name": "/usr/bin/fn_"+str(rnd.randint(10000000000, 99999999999))
                }
                frames.insert(rnd.randint(0, len(frames)), f)
        # Shuffle
        if mode == 2:
            rnd.shuffle(frames)

        return result

    def test_create_problems_clustering0(self):
        self.create_problems_clustering(0)

    def test_create_problems_clustering1(self):
        self.create_problems_clustering(1)

    def test_create_problems_clustering2(self):
        self.create_problems_clustering(2)

    def create_problems_action(self, speedup):
        if speedup == 0:
            self.call_action("create-problems")
        elif speedup == 1:
            self.call_action("create-problems",
                    {"speedup": ""})
        else:
            self.create_problems_action(random.randint(0, 1))

    def create_problems_clustering(self, speedup):
        ureport_core = self.load_report("ureport_core")
        ureport_core1 = self.load_report("ureport_core1")

        self.save_report_dict(ureport_core1)
        self.assertEqual(len(get_reports_for_problems(self.db, 'core')), 0)
        self.create_problems_action(speedup)
        self.assertEqual(self.db.session.query(Problem).count(), 1)

        rnd = random.Random()
        rnd.seed(1337)

        # Drop 1 frame
        self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 0, 1))
        self.create_problems_action(speedup)
        self.assertEqual(self.db.session.query(Problem).count(), 1)

        # Drop 2 frames
        self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 0, 2))
        self.create_problems_action(speedup)
        self.assertEqual(self.db.session.query(Problem).count(), 1)

        # Insert 1 random frame
        self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 1))
        self.create_problems_action(speedup)
        self.assertEqual(self.db.session.query(Problem).count(), 1)

        self.assertEqual(len(get_reports_for_problems(self.db, 'core')), 1)

        # Insert 2 random frames
        self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 1, 2))
        self.create_problems_action(speedup)
        self.assertEqual(self.db.session.query(Problem).count(), 1)
        self.assertEqual(len(get_reports_for_problems(self.db, 'core')), 1)

        # Shuffle
        self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 2))
        self.create_problems_action(speedup)
        self.assertEqual(self.db.session.query(Problem).count(), 2)
        self.assertEqual(len(get_reports_for_problems(self.db, 'core')), 2)

        # Different report
        self.save_report_dict(ureport_core)
        self.create_problems_action(speedup)
        self.assertEqual(self.db.session.query(Problem).count(), 3)
        self.assertEqual(len(get_reports_for_problems(self.db, 'core')), 3)

        # E-E-Everyday I'm shufflin'
        for i in range(50):
            self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 2))
        self.create_problems_action(speedup)
        self.assertEqual(self.db.session.query(Problem).count(), 53)
        self.assertEqual(len(get_reports_for_problems(self.db, 'core')), 53)

        ureport_s = self.randomize_ureport(ureport_core1, rnd, 2)
        self.save_report_dict(ureport_s)
        self.save_report_dict(self.randomize_ureport(ureport_s, rnd, 0, 2))
        self.save_report_dict(self.randomize_ureport(ureport_s, rnd, 1, 2))
        self.save_report_dict(self.randomize_ureport(ureport_s, rnd, 1, 2))
        self.create_problems_action(speedup)
        self.assertEqual(self.db.session.query(Problem).count(), 54)
        self.assertEqual(len(get_reports_for_problems(self.db, 'core')), 54)

    def test_create_problems_clustering_min_count(self):
        ureport_core1 = self.load_report("ureport_core1")

        rnd = random.Random()
        rnd.seed(1337)

        for i in range(10):
            self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 2))
        self.call_action("create-problems")
        # 10 reports of count 1
        self.assertEqual(self.db.session.query(Problem).count(), 10)

        self.call_action("create-problems", {"report-min-count": 2})
        # All shall be ingnored
        self.assertEqual(self.db.session.query(Problem).count(), 0)

        for i in range(10):
            rr = self.randomize_ureport(ureport_core1, rnd, 2)
            self.save_report_dict(rr)
            self.save_report_dict(rr)

        self.call_action("create-problems")
        # 20 reports, 10 of count 1, 10 of count 2
        self.assertEqual(self.db.session.query(Problem).count(), 20)

        self.call_action("create-problems", {"report-min-count": 2})
        # 10 reports of count 2 or more
        self.assertEqual(self.db.session.query(Problem).count(), 10)

    def create_threads(self, threads_source):
        Thread = namedtuple("Thread", ("frames"))
        Frame = namedtuple("Frame", ("function_name"))
        threads = []
        for ts in threads_source:
            frames = []
            for fn in ts:
                frame = Frame("fn{0:02d}".format(fn))
                frames.append(frame)
            threads.append(Thread(tuple(frames)))
        return threads

    def get_clusters_structure(self, clusters):
        return tuple(sorted(map(len, clusters)))

    def test_bucketing(self):
        cp = CreateProblems()

        threads_source1 = [
            # These numbers are mock frame function names, the lists backtraces
            [1, 3],
            [1],
            [2, 3],
            [2],
            [3],
        ]
        threads1 = self.create_threads(threads_source1)
        clusters1_1 = cp._create_clusters(threads1, 100)
        # 5 backtraces, bucket size 100, should have 1 bucket
        self.assertEqual(len(clusters1_1), 1)

        clusters1_2 = self.get_clusters_structure(
            cp._create_clusters(threads1, 4))
        # 5 backtraces, bucket size 4, should have 2 buckets of sizes 2 and 3
        self.assertEqual(clusters1_2, (2, 3))

        clusters1_3 = self.get_clusters_structure(
            cp._create_clusters(threads1, 2))
        # 5 backtraces, bucket size 2, should have 3 buckets of sizes 1, 2, 2
        # the 1 size bucket is ignored
        self.assertEqual(clusters1_3, (2, 2))


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    unittest.main()
