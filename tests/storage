#!/usr/bin/python
# -*- encoding: utf-8 -*-
import os
try:
    import unittest2 as unittest
except ImportError:
    import unittest
import logging
import datetime

import faftests

import pyfaf
from pyfaf.storage import YieldQueryAdaptor
from pyfaf.storage.opsys import Build, Arch
from pyfaf.storage.llvm import LlvmBuild
from pyfaf.storage.custom_types import is_semver, to_semver


class StorageTestCase(faftests.DatabaseCase):
    """
    Simple test to check if database creation & access
    works as expected.
    """

    def test_storage_singleton(self):
        """
        Test if getDatabase returns the same object as we already use.
        """

        self.assertEqual(self.db, pyfaf.storage.getDatabase())

    def test_raises_when_initialized_twice(self):
        """
        Test if Database object raises exception when initialized again.
        """

        with self.assertRaises(Exception):
            pyfaf.storage.Database()

    def _add_llvmbuild_object(self):
        """
        Add dummy LlvmBuild object so we can use it to test
        lob functionality.
        """

        obj = LlvmBuild()
        obj.started = datetime.datetime.now()
        obj.duration = 0
        obj.success = True
        self.db.session.add(obj)
        return obj

    def test_lob_handling(self):
        """
        Test large object handling.
        """

        obj = self._add_llvmbuild_object()

        obj.save_lob("result", "result_log_data")
        self.assertEqual(obj.get_lob("result"), "result_log_data")
        obj.del_lob("result")

    def test_lob_overwrite(self):
        """
        Test if lob overwrite works correctly.
        """

        obj = self._add_llvmbuild_object()

        obj.save_lob("result", "result_log_data")

        with self.assertRaises(Exception):
            obj.save_lob("result", "result_log_data")

        obj.save_lob("result", "overwritten", overwrite=True)
        self.assertEqual(obj.get_lob("result"), "overwritten")
        obj.del_lob("result")

    def test_nonexistent_lob(self):
        """
        Test if nonexistent lobs are handled correctly.
        """

        obj = self._add_llvmbuild_object()

        with self.assertRaises(Exception):
            obj.get_lob_path("oops")

        with self.assertRaises(Exception):
            obj.save_lob("oops", "llvm_build_cant_handle_oops_lobs")

        with self.assertRaises(Exception):
            obj.get_lob("oops", "llvm_build_cant_handle_oops_lobs")

        with self.assertRaises(Exception):
            obj.del_lob("oops", "llvm_build_cant_handle_oops_lobs")

        self.assertEqual(obj.get_lob("result"), None)

    def test_automatic_lob_deletion(self):
        """
        Test if pyfaf.storage.delete_lobs event called before
        sqlalchemy object deletion from database is called
        """

        obj = self._add_llvmbuild_object()
        self.db.session.flush()

        obj.save_lob("result", "result_log_data")
        lobpath = obj.get_lob_path("result")

        self.assertTrue(os.path.isfile(lobpath))

        self.db.session.delete(obj)
        self.db.session.flush()

        self.assertFalse(os.path.isfile(lobpath))

    def test_is_semver(self):
        """
        Check if is_semver returns correct values
        for valid and invalid examples
        """

        valid = ['1.0.0',
                 '1.2.3-gea123',
                 '0.2.0-gea123',
                 ]

        for v in valid:
            self.assertTrue(is_semver(v))

        invalid = ['01.0.0',
                   '1.2.3-gea 123',
                   '1.2.0+lala',
                   '0.02.0',
                   ]

        for iv in invalid:
            self.assertFalse(is_semver(iv))

    def test_to_semver(self):
        """
        Test if Semver custom data type converts
        version string appropriately
        """

        test_cases = [
            ('aa11', '11.0.0'),
            ('1.2.3', '1.2.3'),
            ('1.2.3-gea123', '1.2.3-gea123'),
            ('1.2.3-15', '1.2.315'),
            ('0.1', '0.1.0'),
            ('.', '0.0.0'),
            ('.1', '0.1.0'),
            (',1', '0.1.0'),
            ('.1.1', '0.1.1'),
            ('.1.', '0.1.0'),
            ('.1..', '0.1.0'),
            ('..1', '0.0.1'),
            ('..1..', '0.0.1'),
            ('.1..1.', '0.1.1'),
            ('1.', '1.0.0'),
            ('0.2.4.25', '0.2.425'),
            ('0.2.4.25.3.4', '0.2.42534'),
            ('2.23_05', '2.2305.0'),
            ('20130222622', '2013022262.0.0'),
            ('2147483648', '214748364.0.0'),
            ('0.2.0201311250404', '0.2.02013112504'),
            ('2.5.20161005204600', '2.5.2016100520'),
        ]

        for tc in test_cases:
            self.assertEqual(to_semver(tc[0]), tc[1])

    def test_semver_stored_on_flush(self):
        """
        Make sure Build.semver is stored on session.flush
        """

        ver = "1.2.3-yeah666"
        build = Build()
        build.base_package_name = "sample"
        build.version = ver
        build.release = "1"
        build.epoch = "0"
        self.db.session.add(build)
        self.db.session.flush()

        self.assertEqual(build.version, build.semver)
        self.assertEqual(build.release, build.semrel)

    def test_semver_compares_correctly(self):
        """
        Check whether semver comparison works correctly

        e.g. 3.0.11 > 3.0.1
        """

        ver_a = "3.0.11"
        build_a = Build()
        build_a.base_package_name = "sample"
        build_a.version = ver_a
        build_a.release = "1"
        build_a.epoch = "0"

        ver_b = "3.0.1"
        build_b = Build()
        build_b.base_package_name = "sample"
        build_b.version = ver_b
        build_b.release = "1"
        build_b.epoch = "0"

        ver_c = "3.0.0"
        build_c = Build()
        build_c.base_package_name = "sample"
        build_c.version = ver_c
        build_c.release = "1"
        build_c.epoch = "0"

        ver_d = "3.1.0"
        build_d = Build()
        build_d.base_package_name = "sample"
        build_d.version = ver_d
        build_d.release = "1"
        build_d.epoch = "0"

        self.db.session.add(build_a)
        self.db.session.add(build_b)
        self.db.session.add(build_c)
        self.db.session.add(build_d)
        self.db.session.flush()

        res = (self.db.session.query(Build.semver)
               .filter(Build.base_package_name == 'sample')
               .filter(Build.semver >= '3.0.1')
               .order_by(Build.semver).all())

        self.assertEqual(
            [item[0] for item in res], [ver_b, ver_a, ver_d])

    def test_yield_query_adaptor(self):
        """
        Checks if YieldQueryAdaptor implements the claimed interface and the
        implementation is sane.
        """

        a_ia32 = Arch()
        a_ia32.name = "i386"

        a_amd64 = Arch()
        a_amd64.name = "x86_64"

        a_noarch = Arch()
        a_noarch.name = "noarch"

        self.db.session.add(a_ia32)
        self.db.session.add(a_amd64)
        self.db.session.add(a_noarch)
        self.db.session.flush()

        q = self.db.session.query(Arch)

        yqa = YieldQueryAdaptor(q, 1)

        self.assertEqual(len(yqa), 3)
        self.assertEqual([arch for arch in yqa], [a_ia32, a_amd64, a_noarch])


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    unittest.main()
