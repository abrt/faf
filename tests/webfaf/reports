#!/usr/bin/python
# -*- encoding: utf-8 -*-
import os
import json
try:
    import unittest2 as unittest
except ImportError:
    import unittest
from StringIO import StringIO
from webfaftests import WebfafTestCase

from pyfaf.storage import InvalidUReport, Report, ReportHash, BzBug, ReportBz
from pyfaf import config, ureport
from pyfaf.queries import *

class ReportTestCase(WebfafTestCase):
    """
    Tests for webfaf.reports
    """

    def setUp(self):
        super(ReportTestCase, self).setUp()
        self.basic_fixtures()
        self.db.session.commit()

    def post_file(self, url, contents):
        r = self.app.post(url, buffered=True,
                          headers={"Accept": "application/json"},
                          content_type="multipart/form-data",
                          data={"file": (StringIO(contents), "lala.txt")})

        return r

    def create_bugzilla_bug(self):
        #get last report id
        reports = self.db.session.query(Report).all()

        conn = self.db.session.connection()

        conn.execute("INSERT INTO bugtrackers(name) VALUES('rhel-bugzilla')")

        conn.execute("INSERT INTO bzusers(email,name,real_name,can_login) "
                     "VALUES('test@redhat.com','test@redhat.com','Test User'"
                     ",'t')")

        conn.execute("INSERT INTO bzbugs(opsysrelease_id,summary,status,"
                     "creation_time,last_change_time,tracker_id,component_id,"
                     "whiteboard,creator_id) "
                     "VALUES('1','summary','NEW','2016-02-12 11:44:10',"
                     "'2016-02-12 11:44:10',1,1,1,1)")

        for rep in reports:
            conn.execute("INSERT INTO reportbz(report_id,bzbug_id)"
                         "VALUES('"+ str(rep.id) +"','1')")


    def post_report(self, contents):
        return self.post_file("/reports/new/", contents)

    def post_attachment(self, contents):
        return self.post_file("/reports/attach/", contents)

    def clear_reports(self):
        self.db.session.query(Report).delete()
        self.db.session.commit()
        self.db.session.flush()

    def test_new_report_ureport1(self):
        """
        Test saving of ureport version 1
        """
        path = os.path.join(self.reports_path, 'ureport1')
        with open(path) as file:
            r = self.post_report(file.read())

        js = json.loads(r.data)
        self.assertEqual(js["result"], False)
        self.assertEqual(js["bthash"],
                         "38faad7cb921ee2a19f42ff01a8f9c2066133f8d")

    def test_new_report_ureport2(self):
        """
        Test saving of ureport version 2
        """

        path = os.path.join(self.reports_path, 'ureport2')
        with open(path) as file:
            r = self.post_report(file.read())

        js = json.loads(r.data)
        self.assertEqual(js["result"], False)
        self.assertEqual(js["bthash"],
                         "2dd542ba1f1e074216196b6c0bd548609bf38ebc")

    def test_new_report_prefilter_solution(self):
        """
        Test prefilter solutions of ureport version 2
        """

        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "TestSolution",
            "NOTE": "TestSolution",
            "note-html": "<html><b>HTML</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "TestSolution",
            "opsys": "fedora",
            "pkgname": "^faf.*$",
        }), 0)
        self.db.session.commit()

        path = os.path.join(self.reports_path, 'ureport2')
        with open(path) as file:
            r = self.post_report(file.read())

        js = json.loads(r.data)

        self.assertEqual(js["result"], True)
        self.assertEqual(js["bthash"],
                         "2dd542ba1f1e074216196b6c0bd548609bf38ebc")
        self.assertIn("Your problem seems to be caused by TestSolution",
                      js["message"])
        self.assertEqual(js["solutions"][0]["url"],
                         "http://www.fedoraproject.org")

    def test_invalid_report(self):
        """
        Test error handling of invalid reports
        """

        r = self.post_report("invalid")
        self.assertEqual(json.loads(r.data)["error"], u"Couldn't parse JSON data.")
        self.assertEqual(self.db.session.query(InvalidUReport).count(), 1)

        r = self.post_report('{"invalid":"json"}')
        self.assertEqual(json.loads(r.data)["error"], u"uReport data is invalid.")
        self.assertEqual(self.db.session.query(InvalidUReport).count(), 2)

    def test_attach(self):
        """
        Test attach functionality
        """

        path = os.path.join(self.reports_path, 'bugzilla_attachment')
        with open(path) as file:
            r = self.post_attachment(file.read())
        self.assertEqual(json.loads(r.data)["result"], True)

    def test_attach_invalid(self):
        """
        Test error handling of invalid attachments
        """

        r = self.post_attachment("invalid")
        self.assertEqual(json.loads(r.data)["error"], u"Invalid JSON file")

    def test_report_duplicates(self):
        """
        Test reporẗ́s duplicates
        CONSTATNT WICH IS TESTED: EQUAL_UREPORT_EXISTS
        """
        self.clear_reports()
        config.config['ureport.known'] = "EQUAL_UREPORT_EXISTS"

        path = os.path.join(self.reports_path, 'ureport_duplicate')
        with open(path) as file:
            first = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        path = os.path.join(self.reports_path, 'ureport_duplicate')
        with open(path) as file:
            second = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        path = os.path.join(self.reports_path, 'ureport_duplicate2')
        with open(path) as file:
            third = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        first_js = json.loads(first.data)
        second_js = json.loads(second.data)
        third_js = json.loads(third.data)

        self.assertFalse(first_js["result"]) #First is unknown
        self.assertTrue(second_js["result"]) #Same as first = is known
        self.assertFalse(third_js["result"]) # in this case is unknown

    def test_report_duplicate_os_minor(self):
        """
        Test reporẗ́s duplicates
        CONSTATNT WICH IS TESTED: BUG_OS_MINOR_VERSION
        """
        self.clear_reports()

        config.config['ureport.known'] = "BUG_OS_MINOR_VERSION"

        path = os.path.join(self.reports_path, 'ureport_duplicate')
        with open(path) as file:
            first = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)

        self.db.session.commit()
        self.db.session.flush()
        self.create_bugzilla_bug()
        self.db.session.commit()
        self.db.session.flush()

        # minor and major are same
        path = os.path.join(self.reports_path, 'ureport_duplicate')
        with open(path) as file:
            second = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        # same major different minor
        path = os.path.join(self.reports_path, 'ureport_duplicate2')
        with open(path) as file:
            third = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        # minor and major are different
        path = os.path.join(self.reports_path, 'ureport_duplicate3')
        with open(path) as file:
            fourth = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        # different major and same minor
        path = os.path.join(self.reports_path, 'ureport_duplicate4')
        with open(path) as file:
            fifth = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        first_js = json.loads(first.data)
        second_js = json.loads(second.data)
        third_js = json.loads(third.data)
        fourth_js = json.loads(fourth.data)
        fifth_js = json.loads(fifth.data)

        self.assertFalse(first_js ["result"])
        self.assertTrue(second_js["result"])
        self.assertFalse(third_js ["result"])
        self.assertFalse(fourth_js["result"])
        self.assertFalse(fifth_js ["result"])

    def test_report_duplicate_os_major(self):
        """
        Test reporẗ́s duplicates
        CONSTATNT WICH IS TESTED: BUG_OS_MAJOR_VERSION
        """
        self.clear_reports()

        config.config['ureport.known'] = "BUG_OS_MAJOR_VERSION"

        path = os.path.join(self.reports_path, 'ureport_duplicate')
        with open(path) as file:
            first = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)

        self.db.session.commit()
        self.db.session.flush()
        self.create_bugzilla_bug()

        self.db.session.commit()
        self.db.session.flush()

        # minor and major are same
        path = os.path.join(self.reports_path, 'ureport_duplicate')
        with open(path) as file:
            second = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        # same major different minor
        path = os.path.join(self.reports_path, 'ureport_duplicate2')
        with open(path) as file:
            third = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        # minor and major are different
        path = os.path.join(self.reports_path, 'ureport_duplicate3')
        with open(path) as file:
            fourth = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        # different major and same minor
        path = os.path.join(self.reports_path, 'ureport_duplicate4')
        with open(path) as file:
            fifth = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        first_js = json.loads(first.data)
        second_js = json.loads(second.data)
        third_js = json.loads(third.data)
        fourth_js = json.loads(fourth.data)
        fifth_js = json.loads(fifth.data)

        bugs = self.db.session.query(BzBug).all()

        self.assertFalse(first_js["result"])
        self.assertTrue(second_js["result"])
        self.assertTrue(third_js["result"])
        self.assertFalse(fourth_js["result"])
        self.assertFalse(fifth_js["result"])


    def test_find_report(self):
        self.clear_reports()

        path = os.path.join(self.reports_path, 'ureport_duplicate')
        with open(path) as file:
            first = self.post_report(file.read())

        self.assertEqual(self.call_action("save-reports"), 0)
        self.db.session.commit()
        self.db.session.flush()

        first_js  = json.loads(first.data)

        report  = find_report(self.db, first_js['bthash'])
        report1 = find_report(self.db, first_js['bthash'],
                              report_os={'version': '6.7','name': 'rhel',
                                         'architecture': 'x86_64'})
        report2 = find_report(self.db, first_js['bthash'],
                              report_os={'version': '7.1','name': 'rhel',
                                         'architecture': 'x86_64'})
        report3 = find_report(self.db, first_js['bthash'],
                              report_os={'version': '6.7','name': 'rhel',
                                         'architecture': 'noarch'})
        report4 = find_report(self.db, first_js['bthash'],
                              report_os={'version': '6.8','name': 'rhel',
                                         'architecture': 'x86_64'})

        self.assertIsNotNone(report)
        self.assertIsNotNone(report1)
        self.assertIsNone(report2)
        self.assertIsNone(report3)
        self.assertIsNone(report4)

    def test_known_type(self):
        result = ureport.valid_known_type("EQUAL_UREPORT_EXISTS".split(" "))
        result1 = ureport.valid_known_type("BUG_OS_MINOR_VERSION".split(" "))
        result2 = ureport.valid_known_type("BUG_OS_MAJOR_VERSION".split(" "))
        result3 = ureport.valid_known_type("EQUAL_UREPORT_EXISTS "
                                           "BUG_OS_MINOR_VERSION".split(" "))
        result4 = ureport.valid_known_type("  ".strip().split(" "))
        result5 = ureport.valid_known_type("BUGS_OS_MAJOR_VERSION".split(" "))
        result6 = ureport.valid_known_type( "EQUAL_UREPORT_EXISTS   "
                                            "BUG_OS_MINOR_VERSION".split(" "))

        self.assertTrue(result)
        self.assertTrue(result1)
        self.assertTrue(result2)
        self.assertTrue(result3)
        self.assertTrue(result4)
        self.assertFalse(result5)
        self.assertTrue(result6)


if __name__ == "__main__":
    unittest.main()
